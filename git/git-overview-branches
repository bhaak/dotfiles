#!/usr/bin/env ruby

require 'optparse'
begin
  require_relative "#{ENV['HOME']}/.dotfiles/dependencies/term-rgbcolor/lib/term/rgbcolor"
rescue LoadError
  module Term
    RGBColor = Struct.new(:r, :g, :b) { def to_s; ''; end }
  end
end

git_options = []

$color = $stdout.tty?
$width = nil
OptionParser.new do |parser|
  parser.separator "List last commits of all reachable git branches"
  parser.separator ""
  parser.separator "Options:"
  parser.on('-a', '--all', 'Show local and remote branches') {
    git_options << '-a'
  }
  parser.on('-r', '--remote', 'Show only remote branches') {
    git_options << '-r'
  }
  parser.on('-c', '--color', 'Force coloring ouput') {
    $color = true
  }
  parser.on('-w', '--width=INTEGER', 'Set output width') {|width|
    $width = width.to_i
  }

end.parse!

include_terms = []
exclude_terms = []
ARGV.map { |term|
  negative = term[0] == '-'
  term = term[1..-1] if negative
  include_terms << term unless negative
  exclude_terms << term if negative
}

SORT_BY='authordate'

# see https://git-scm.com/docs/git-for-each-ref#_field_names
FORMAT=[
  '%(objectname:short)',
  '%(refname:short)',
  '%(subject)',
  '%(authorname)',
  '%(authoremail)',
  '%(authordate:iso8601)',
  '%(authordate:raw)',
  '%(refname)',
]

reset  = "\e[0m"
local_branch_color  = Term::RGBColor.new(175, 175, 0, fallback: :yellow)
remote_branch_color = Term::RGBColor.new(175, 135, 0, fallback: :red)

branches = `git branch #{git_options.join(' ')} --format='#{FORMAT.join("\t")}' --sort #{SORT_BY}`.split("\n")

branch_length = branches.map {|b| b.split("\t")[1].length}.max
max_column_length = $width || `tput cols`.to_i if true
color_number = 0
previous_hash = ''
branches.each { |branch|
  f = branch.split("\t")
  next if !include_terms.empty? && !include_terms.any? { |term| (f[2] + f[7]).downcase.include?(term) }
  next if !exclude_terms.empty? && exclude_terms.any? { |term| (f[2] + f[7]).downcase.include?(term) }

  # prevent too dark commit hash colors
  r = f[0][0..1].to_i(16)*200/255 + 50
  g = f[0][2..3].to_i(16)*200/255 + 50
  b = f[0][4..5].to_i(16)*200/255 + 50
  color = Term::RGBColor.new(r, g, b).to_s

  # 8 color terminal fallback
  if color.empty?
    if previous_hash != f[0]
       previous_hash = f[0]
       # use colors 1 to 7
       color_number = (color_number % 7) + 1
    end

    color = "\e[3#{color_number}m"
  end

  # indicate age by grey colors
  age = Time.now.to_i - f[6].to_i

  staleness = [255 - Math::log(1+age/86400).ceil*12, 75].max
  age_color = Term::RGBColor.new(staleness, staleness, staleness)

  if $color
    message_length = max_column_length-1 - (f[0].size + 1 + 19 + 1 + branch_length + 1)
  else
    message_length = -1
    color = age_color = local_branch_color = remote_branch_color = ''
  end

  branch_color = f[7].start_with?('refs/remotes/') ? remote_branch_color : local_branch_color

  output = [
    "#{color}#{f[0]}#{reset}",
    "#{age_color}#{f[5][0..18]}#{reset}",
    "#{branch_color}#{f[1].ljust(branch_length)}#{reset}",
    f[2][0..message_length]
  ].join(' ')

  puts output
}
